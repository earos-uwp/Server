
import numpy as np
import pandas as pd

from TreeScripts.Node import Node

if __name__ == '__main__':
    calc_3 = Node('Calculus and Analytic Geometry III', 'single')
    statistical_methods_with_applications = Node('Statistical Methods with Applications', 'single')
    calc_2 = Node('Calculus and Analytic Geometry II', 'single')
    discrete = Node('Discrete Mathematics', 'single')
    ai = Node('Artificial Intelligence', 'and')
    calc_1 = Node('Calculus and Analytic Geometry I', 'or')
    computer_graphics = Node('Computer Graphics', 'and')
    pls = Node('Programming Language Structures', 'single')
    caos = Node('Computer Architecture/Operating Systems', 'single')
    data_comm = Node('Data Communications and Computer Networks', 'single')
    database = Node('Database Design and Implementation', 'and')
    comp_sec = Node('Introduction to Computer Security', 'single')
    micro_proc = Node('Introduction to Microprocessors', 'and')
    oops_2 = Node('Object-Oriented Programming and Data Structures II', 'single')
    precalc = Node('Precalculus', 'single')
    software_proj_2 = Node('Software Project II', 'and')
    trig = Node('Trigonometry and Analytic Geometry', 'single')
    college_alg = Node('College Algebra', 'single')
    physics_2 = Node('General Physics II', 'and')
    logic = Node('Logic and Digital Design', 'or')
    oops_1 = Node('Object-Oriented Programming and Data Structures I', 'single')
    software_proj_1 = Node('Software Engineering Project I', 'and')
    maintenance = Node('Software Maintenance and Reengineering', 'and')
    quality = Node('Software Quality', 'single')
    circuits_1 = Node('Circuit Modeling I', 'single')
    physics_1 = Node('General Physics I', 'or')
    human_factors = Node('Human Factors Engineering', 'and')
    intermediate_algebra = Node('Intermediate Algebra', 'or')
    inter_software = Node('Intermediate Software Engineering', 'and')
    ooad = Node('Object Oriented Analysis and Design', 'and')
    princ_app = Node('Principles and Applications of Project Management', 'single')
    c_plus_plus = Node('Programming in C++', 'single')
    element_algebra = Node('Elementary Algebra', 'single')
    fund_eng = Node('Fundamentals of Engineering Analysis Tools', 'or')
    intro_soft = Node('Introduction to Software Engineering', 'single')
    oper_research_1 = Node('Operations Research I', 'single')
    quality_eng = Node('Quality Engineering', 'single')
    real_time = Node('Real-Time Embedded Systems Programming', 'and')

    calc_3.add_prereq(calc_2)
    statistical_methods_with_applications.add_prereq(calc_2)
    calc_2.add_prereq(calc_1)
    discrete.add_prereq(calc_1)
    ai.add_prereq(discrete)
    ai.add_prereq(oops_2)
    calc_1.add_prereq(trig)
    calc_1.add_prereq(precalc)
    computer_graphics.add_prereq(calc_2)
    computer_graphics.add_prereq(oops_2)
    pls.add_prereq(oops_2)
    caos.add_prereq(oops_1)
    data_comm.add_prereq(oops_1)
    database.add_prereq(oops_1)
    a = Node('a', 'or')
    a.add_prereq(discrete)
    a.add_prereq(Node('Finite Mathematics with Applications', 'single'))
    database.add_prereq(a)
    comp_sec.add_prereq(oops_1)
    micro_proc.add_prereq(c_plus_plus)
    micro_proc.add_prereq(logic)
    oops_2.add_prereq(oops_1)
    precalc.add_prereq(intermediate_algebra)
    software_proj_2.add_prereq(quality)
    software_proj_2.add_prereq(software_proj_1)
    trig.add_prereq(college_alg)
    college_alg.add_prereq(intermediate_algebra)
    physics_2.add_prereq(calc_2)
    physics_2.add_prereq(physics_1)
    logic.add_prereq(Node('Electrical Engineering Projects and Tools', 'single'))
    b = Node('b','or')
    b.add_prereq(caos)
    b.add_prereq(circuits_1)
    logic.add_prereq(b)
    oops_1.add_prereq(c_plus_plus)
    software_proj_1.add_prereq(discrete)
    c = Node('c', 'or')
    c.add_prereq(inter_software)
    c.add_prereq(ooad)
    software_proj_1.add_prereq(c)
    maintenance.add_prereq(oops_2)
    d = Node('d', 'and')
    d.add_prereq(intro_soft)
    d.add_prereq(ooad)
    maintenance.add_prereq(d)
    quality.add_prereq(oops_2)
    circuits_1.add_prereq(calc_1)
    physics_1.add_prereq(calc_1)
    physics_1.add_prereq(fund_eng)
    human_factors.add_prereq(calc_2)
    human_factors.add_prereq(Node('Anatomy', 'single'))
    intermediate_algebra.add_prereq(element_algebra)
    intermediate_algebra.add_prereq(Node('Mathematical Problem Solving', 'single'))
    inter_software.add_prereq(oops_2)
    inter_software.add_prereq(intro_soft)
    ooad.add_prereq(oops_1)
    ooad.add_prereq(intro_soft)
    princ_app.add_prereq(Node('Engineering Management', 'single'))
    c_plus_plus.add_prereq(Node('Introduction to Programming', 'single'))
    element_algebra.add_prereq(Node('Basic Algebra', 'single'))
    fund_eng.add_prereq(intermediate_algebra)
    fund_eng.add_prereq(college_alg)
    intro_soft.add_prereq(oops_1)
    oper_research_1.add_prereq(statistical_methods_with_applications)
    quality_eng.add_prereq(statistical_methods_with_applications)
    e = Node('e', 'and')
    e.add_prereq(oops_2)
    e.add_prereq(ooad)
    real_time.add_prereq(e)
    f = Node('f', 'or')
    f.add_prereq(micro_proc)
    f.add_prereq(caos)
    real_time.add(f)