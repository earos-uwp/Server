from pomegranate import *
import seaborn; seaborn.set_style('whitegrid')
import numpy as np

from bayesian_network.Practice.OOPS2Practice.NodeCreator import *
from bayesian_network.Practice.CSVDataReader import *

# The goal of this file was to see how fitting (training the network) with real data works and
# to create a network from data alone, instead of with predetermined probabilities. OOPS2FittingExample.py
# was a failed attempt and was changed to use an inefficient structure system, but it should work

# This file failed its goal. It seems in the current version of pomegranate (11 Jun 2020) that the only
# structure you can define while using BayesianNetwork.from_samples(data) instead of the method in
# OOPS2FittingExample.py is direct connections. For example datapoint1 directly causes datapoint2 instead
# of multiple data points influencing datapoint2. It can only specify a linear structure instead of a branching
# tree structure. Part of this problem relates to the way the structure is defined, for example:
# data[:,3] = data[:,0]
# data[:,3] = data[:,1] <-this overwrites the previous defined structure
# data[:,3] = data[:,2] <-this overwrites the previous defined structure
# Attempting to write the structure linearly (because it works in the case of OOPS2) in the following way
# data[:,1] = data[:,0]
# data[:,2] = data[:,1]
# data[:,3] = data[:,2]
# does not work either, because what is happening with this structure definition is that the data from
# column 1 is set to the data from column 0 and so on. This system may have been only designed for
# true or false (1 or 0) values where, for example, if a datapoint in column 0 was true, that automatically
# meant that a datapoint in column 1 was true and then the rest of the structure was generated by
# BayesianNetwork.from_samples(). This can be shown by rerunning StructurePractice.py multiple times.
# However, this seems odd because if the previous sentence was true from the data,
# then there would be no reason to explicitly state this structure. It could be learned from the data.
# This confusion might be due to pomegranate still being actively worked on and the tutorials and examples not being
# extensive. The only example currently is a linear structure with only true-false data.
# https://github.com/jmschrei/pomegranate/blob/master/tutorials/B_Model_Tutorial_4b_Bayesian_Network_Structure_Learning.ipynb

# Real OOPS2 practice data located on google drive at \Summer_2020\BayesianNetwork\PracticeSampleData

FIT_FILE = 'PracticeSampleData - OOPS2 Real Data.csv'

# Gets real OOPS2 data from a csv
data = getOOPS2FittingData()

# Formats data to work with the structure defining syntax
# This would have to be deformatted after the structure is defined to replace the -1s with None
for row in data:
    i = 0
    for rowData in row:
        if rowData is '':
            row[i] = -1
        i += 1

data = np.asarray(data, dtype=np.int_)

# Forces OOPS2 column in the data to be dependent on the prereq columns for the model structure
data[:,3] = data[:,0]
data[:,3] = data[:,1]
data[:,3] = data[:,2]

# data[:,1] = data[:,0]
# data[:,2] = data[:,1]
# data[:,3] = data[:,2]

print("Dependencies created \n")

# Create the Bayesian network object with the previous data
model = BayesianNetwork.from_samples(data)
print("Bayesian Network created \n")

print(model.structure)

# Finalizes the Bayesian Network structure
model.bake()
print("Bayesian Network structure finalized \n")

# Fitting using real OOPS2 grades and prereq grades
model.fit(data)
print("Data fit complete \n")

print(model.predict([[None, None, None, 10]]))

